
KB = 1024
MB = KB * 1024
GB = MB * 1024
TB = GB * 1024

services = function
	api = {}
	group = sync.group()

	-- services.id()
	seq = sync.channel(0)
	api.id = function
		return seq:read()
	end
	group:run(function
		n = 1
		while seq:write(n) do
			n++
		end
	end)

	-- services.stop()
	api.stop = function
		seq:close()
		group:wait()
	end

	return api
end()

core = {
	init = function(self)
		self.id = services.id()
		self.todo = sync.queue()
	end,

	jobs = function(self)
		for self.todo do(fn)
			fn(self)
		end
	end,

	job = function(self, fn)
		self.todo:write(fn)
	end
}

chassis = {
	init = function(self)
		self.devices = []
	end,

	insert = function(self, dev)
		self.job(do
			self.devices:push(dev)
		end)
	end,
}

create = function(roles)

	roles = (roles or []):shove(core)
	node = setprototype({}, roles)

	for roles do(i, role)
		role.init(node)
	end

	return node
end

play = function(group, inbox)

	outbox = sync.channel(8)

	group:run(function
		for inbox do(msg)
			if try, msg = msg:json() then
				print("got", msg)
				outbox:write("ok")
			else
				log(try)
			end
		end
		outbox:close()
	end)

	return outbox
end

http.serve(":3000", "static/", {
	"/join" = function(req)

		if ok, ws = req:websocket() then
			group = sync.group()

			inbox = sync.channel(8)
			outbox = play(group, inbox)

			group:run(function
				while try, mode, msg = ws:read() do
					inbox:write(msg:text())
				end
				log(try)
				inbox:close()
			end)

			group:run(function
				for outbox do(msg)
					ws:write(ws.text, msg)
				end
			end)

			group:wait()
		end
	end,
})
